#!/usr/bin/env bash

# Regular expression matching against a string
# Usage:
#   _match [PATTERN] [INPUT]
_match() {
    PATTERN="${1}"
    [ -n "${PATTERN}" ] || ( echo "No pattern provided" && exit 1 )

    INPUT="${2}"
    [ -n "${INPUT}" ] || ( echo "No input provided" && exit 1 )

    grep -E "${PATTERN}" <<< "${INPUT}" | head -1
}

DATE_FORMAT="+%Y-%m-%dT%H:%M:%SZ"

# Helper function to get a formatted date.
# Supports both GNU date 
_date() {
    MODIFIER="${1}"

    date -d "${MODIFIER}" "${DATE_FORMAT}" 2> /dev/null \
        || date -v "${MODIFIER}" "${DATE_FORMAT}"
}

# Configuration
SCRIPT_NAME="$(basename "$0")"
PAYPAL_CLIENT_ID="${PAYPAL_CLIENT_ID:-}"
PAYPAL_SECRET_KEY="${PAYPAL_SECRET_KEY:-}"
TRANSACTIONS_START=$(_date -30d)
TRANSACTIONS_END=$(_date +1d)
TRANSACTIONS_PAGE="1"
TRANSACTIONS_LENGTH="500"
TRANSACTIONS_TYPE=""

_help() {
  cat <<EOF

  ${SCRIPT_NAME}


    This script downloads JSON data using the Paypal API

    Paypal API Documentation:
    https://developer.paypal.com/docs/api/transaction-search/v1

    External Dependencies:
    curl


  Usage:

    ${SCRIPT_NAME} [OPTIONS]

    # Example: get the second 10 transactions between May 21 and May 30, 2021
    ${SCRIPT_NAME} --start="2021-05-21T00:00:00Z" --end "2021-05-30T00:00:00Z" --count=10 --page=2


  Options:

    -h|--help            Display help and exit

    --client-id          Paypal API client ID. Can be set with \`PAYPAL_CLIENT_ID\` environment variable

    --secret-key         Paypal API secret key. Can be set with \`PAYPAL_SECRET_KEY\` environment variable

    --start              Filters transactions by a start date, in Internet date and time format.
                         Seconds are required. Fractional seconds are optional.
                         Eg. 2021-05-21T00:00:00-0000
                         https://tools.ietf.org/html/rfc3339#section-5.6

    --end                Filters transactions by an end date, in Internet date and time format.
                         Seconds are required. Fractional seconds are optional. Maximum supported range is 31 days.
                         Eg. 2021-05-21T00:00:00-0000
                         https://tools.ietf.org/html/rfc3339#section-5.6

    --page               The page number
                         Default "1"

    --count              The number of transactions to return.
                         Default "500". Maximum "500".

    --type               Filter the type of transactions using a transaction code
                         https://developer.paypal.com/docs/transaction-search/transaction-event-codes/

EOF
}

FLAG_PATTERN="^-{1,2}\w"
FLAG_PATTERN_WITH_VALUE="^-{1,2}\w{1,}="

# Parse options passed to the script
_options() {
    # Loop through options
    while [ -n "${1}" ]; do
        # Get the name
        NAME=$(_match "${FLAG_PATTERN}" "${1}")
        VALUE=""
        shift

        # Move on if the option is not a flag
        [ -n "${NAME}" ] || continue

        FLAG_WITH_VALUE=$(_match "${FLAG_PATTERN_WITH_VALUE}" "${NAME}")
        NEXT_ARG_FLAG=$(_match "${FLAG_PATTERN}" "${1}")

        # If the option contains a value using an equal sign
        if [ -n "${FLAG_WITH_VALUE}" ]; then
            DATA="${NAME}"
            NAME=${DATA%%=*}
            VALUE=${DATA/$NAME=/}
        # And another argument is present
        # And the next argument is not a flag
        elif [ -n "${1}" ] && [ -z "${NEXT_ARG_FLAG}" ]; then
            VALUE="${1}"
            shift
        fi

        # Normalize flag with two hyphens
        FLAG_SINGLE_HYPHEN=$(_match "^-\w{2,}" "${NAME}")
        [ -n "${FLAG_SINGLE_HYPHEN}" ] && NAME="-${NAME}"

        case "${NAME}" in
            -h|--help) _help; exit;;
            --client-id) PAYPAL_CLIENT_ID="${VALUE}";;
            --secret-key) PAYPAL_SECRET_KEY="${VALUE}";;
            --start|--from) TRANSACTIONS_START="${VALUE}";;
            --end|--to) TRANSACTIONS_END="${VALUE}";;
            --page) TRANSACTIONS_PAGE="${VALUE}";;
            --count|--length) TRANSACTIONS_LENGTH="${VALUE}";;
            --type) TRANSACTIONS_TYPE="${VALUE}";;
            # Catch all for invalid options
            *) _help; exit;;
        esac
    done
}

# Generate an oauth request
_oauth() {
    curl -s "https://api-m.paypal.com/v1/oauth2/token" \
        -d "grant_type=client_credentials" \
        -u "${PAYPAL_CLIENT_ID}:${PAYPAL_SECRET_KEY}"
}

# Extract the access token from the Oauth request
_token() {
    TOKEN=$(_oauth)
    TOKEN=${TOKEN/*access_token\":\"/}
    printf "%s" "${TOKEN/\"*/}"
}

_transactions() {
    START="start_date=${TRANSACTIONS_START}"
    END="&end_date=${TRANSACTIONS_END}"
    LENGTH="&page_size=${TRANSACTIONS_LENGTH}"
    PAGE="&page=${TRANSACTIONS_PAGE}"
    TOKEN=$(_token)
    [ -z "${TRANSACTIONS_TYPE}" ] && TYPE="" || TYPE="&transaction_type=${TRANSACTIONS_TYPE}"

    curl -s \
        -H "Authorization: Bearer ${TOKEN}" \
        "https://api.paypal.com/v1/reporting/transactions?${START}${END}${LENGTH}${PAGE}&fields=all${TYPE}"
}

_options "$@"
_transactions

